---
// Theme toggle component for switching between light and dark modes
---

<button 
  id="theme-toggle" 
  class="focus-ring relative inline-flex items-center justify-center w-10 h-10 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200"
  aria-label="Toggle theme"
  title="Toggle theme"
>
  <!-- Sun icon for light mode -->
  <svg 
    id="sun-icon" 
    class="w-5 h-5 text-yellow-500 transition-all duration-300 opacity-100 dark:opacity-0 dark:rotate-90"
    fill="none" 
    stroke="currentColor" 
    viewBox="0 0 24 24"
  >
    <path 
      stroke-linecap="round" 
      stroke-linejoin="round" 
      stroke-width="2" 
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    />
  </svg>
  
  <!-- Moon icon for dark mode -->
  <svg 
    id="moon-icon" 
    class="absolute w-5 h-5 text-blue-400 transition-all duration-300 opacity-0 dark:opacity-100 rotate-90 dark:rotate-0"
    fill="none" 
    stroke="currentColor" 
    viewBox="0 0 24 24"
  >
    <path 
      stroke-linecap="round" 
      stroke-linejoin="round" 
      stroke-width="2" 
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    />
  </svg>
</button>

<script>
  function initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    const sunIcon = document.getElementById('sun-icon');
    const moonIcon = document.getElementById('moon-icon');
    
    // Get the stored theme or default to 'light'
    const getStoredTheme = () => localStorage.getItem('theme') || 'light';
    
    // Set the theme
    const setTheme = (theme: string) => {
      document.documentElement.setAttribute('data-theme', theme);
      localStorage.setItem('theme', theme);
      
      // Update icon visibility
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    };
    
    // Initialize theme on page load
    const initialTheme = getStoredTheme();
    setTheme(initialTheme);
    
    // Check for system preference if no stored theme
    if (!localStorage.getItem('theme')) {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      setTheme(prefersDark ? 'dark' : 'light');
    }
    
    // Theme toggle handler
    themeToggle?.addEventListener('click', () => {
      const currentTheme = getStoredTheme();
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      setTheme(newTheme);
      
      // Add a little bounce animation
      themeToggle.style.transform = 'scale(0.95)';
      setTimeout(() => {
        themeToggle.style.transform = 'scale(1)';
      }, 100);
    });
    
    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        setTheme(e.matches ? 'dark' : 'light');
      }
    });
  }
  
  // Initialize on DOM content loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initThemeToggle);
  } else {
    initThemeToggle();
  }
  
  // Re-initialize on navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', initThemeToggle);
</script>

<style>
  #theme-toggle {
    background: var(--color-card);
    border-color: var(--color-border);
    box-shadow: var(--shadow-sm);
  }
  
  #theme-toggle:hover {
    background: var(--color-card-hover);
    border-color: var(--color-border-hover);
    box-shadow: var(--shadow);
  }
  
  /* Tailwind classes for dark mode */
  .dark #sun-icon {
    opacity: 0;
    transform: rotate(90deg);
  }
  
  .dark #moon-icon {
    opacity: 1;
    transform: rotate(0deg);
  }
</style>